<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace = "PostMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="postMap" type= "study.spring.zigme.model.Post">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="postNo" column="postNo" />
		<result property="postSubtitle" column="postSubtitle" />
		<result property="postTitle" column="postTitle" />
		<result property="postContent" column="postContent" />
		<result property="postUpcount" column="postUpcount" />
		<result property="postViewcount" column="postViewcount" />
		<result property="postRegdate" column="postRegdate" />
		<result property="postNoti" column="postNoti" />
		<result property="userNo" column="userNo" />
		<result property="prevpage" column="prevpage" />
		<result property="nextpage" column="nextpage" />
		<result property="nickname" column="nickname" />
		<result property="blockUserflag" column="blockUserflag" />
		<result property="outUserflag" column="outUserflag" />	
	</resultMap>
	
	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id ="selectItem" parameterType="study.spring.zigme.model.Post"
	resultMap="postMap">
	SELECT postNo, postSubtitle, postTitle, postContent, postUpcount, postViewcount,
		DATE_FORMAT(postRegdate, '%Y-%m-%d %H:%m:%s') AS postRegdate, postNoti, 
		p.userNo, nickname, blockUserflag, outUserflag
	FROM post p
	INNER JOIN user u ON p.userNo = u.userNo
	WHERE PostNo = #{postNo};
	</select>
	
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id ="selectList" parameterType="study.spring.zigme.model.Post"
	resultMap="postMap">
	SELECT postNo, postSubtitle, postTitle, postContent, postUpcount, postViewcount,
		DATE_FORMAT(postRegdate, '%Y-%m-%d %H:%m:%s') AS postRegdate, postNoti, 
		p.userNo, nickname, blockUserflag, outUserflag
	FROM post p
	INNER JOIN user u ON p.userNo = u.userNo	
	<where>
    	<if test="postSubtitle != null and postSubtitle != ''">
        	postSubtitle LIKE concat('%', #{postSubtitle}, '%')
        </if>
		<if test="postTitle != null and postTitle != ''">
           AND postTitle LIKE concat('%', #{postTitle}, '%')
        </if>
	</where>
	
	ORDER BY postNo DESC
	<if test="listCount > 0">
	LIMIT #{offset}, #{listCount};
	</if>
	</select>
	
	<!-- 이전 글번호 조회를 위한 기능 정의 -->
	<select id="selectPrevnum" parameterType="study.spring.zigme.model.Post"
	resultType="int">
	select postNo as prevpage
	from post 
	where
	postNo = (select max(postNo) from post where postNo <![CDATA[ < ]]> #{postNo}); 
	</select>
	
	<!-- 다음 글번호 조회를 위한 기능 정의 -->
	<select id="selectNextnum" parameterType="study.spring.zigme.model.Post"
	resultType="int">
	select postNo as nextpage
	from post
	where
	postNo = (select postNo from post where postNo <![CDATA[ > ]]> #{postNo} order by postNo limit 1);
	</select>
	
	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType = "study.spring.zigme.model.Post"
		useGeneratedKeys="true"
		keyProperty="postNo">
		INSERT INTO post (postSubtitle, postTitle, postContent, postUpcount, postViewcount, postRegdate,
			postNoti, userNo) VALUES 
			(#{postSubtitle}, #{postTitle}, #{postContent}, 0, 0, now(),
			"Y", 1);
	</insert>
	
	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
	parameterType="study.spring.zigme.model.Post">
	DELETE FROM post WHERE postNo = #{postNo};
	</delete>
	
	<!-- post 데이터 갱신을 위한 기능 정의 -->
	<update id= "updateItem"
	parameterType="study.spring.zigme.model.Post">
	UPDATE post
	<set>
		<if test="postTitle != null and postTitle != ''">
			postTitle = #{postTitle},
		</if>
		<if test="postSubtitle != null and postSubtitle != ''">
			postSubtitle = #{postSubtitle},
		</if>
		<if test="postContent != null and postContent != ''">
			postContent = #{postContent},
		</if>
		<if test="postRegdate != null and postRegdate != ''">
			postRegdate = #{postRegdate},
		</if>
		<if test="postUpcount != null and postUpcount != ''">
			postUpcount = #{postUpcount},
		</if>
		<if test="postViewcount != null and postViewcount != ''">
			postViewcount = #{postViewcount},
		</if>
		<if test="postNoti != null and postNoti != ''">
			postNoti = #{postNoti}
		</if>
	</set>
	WHERE postNo =#{postNo};
	</update>
	
	
	
	<update id="udpostViewcount"
	parameterType="study.spring.zigme.model.Post">
		UPDATE post 
		SET postViewcount = postViewcount + 1
		WHERE postNo = #{postNo}
	</update>
	<!-- 전체 데이터 수 조회 -->
	<!-- 
		조건에 맞는 데이터수를 조회할려면 dynamic where절을 이용하면 된다.
	 -->
	 <select id="selectCountAll"
	 parameterType="study.spring.zigme.model.Post"
	 resultType="int">
	 SELECT COUNT(*) FROM post;
	 </select>
</mapper>